// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/RsaVerify.sol";

/*
https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/dss/186-2rsatestvectors.zip file SigVer15_186-3.rsp
*/

contract RsaVerifyTest is Test {
   using RsaVerify for *;

   bytes n = hex"a8d68acd413c5e195d5ef04e1b4faaf242365cb450196755e92e1215ba59802a"
             hex"afbadbf2564dd550956abb54f8b1c917844e5f36195d1088c600e07cada5c080"
             hex"ede679f50b3de32cf4026e514542495c54b1903768791aae9e36f082cd38e941"
             hex"ada89baecada61ab0dd37ad536bcb0a0946271594836e92ab5517301d45176b5";

   function testOk() public {
        bytes memory e   = hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000010001";

        bytes memory Msg = hex"f56379c42e3ba856585ca28f7fb768f65d273a5fc546156142857b0afb7c72d2"
                           hex"d97ecfceec71b4260bdc58c9bb42065f53af69805d9006233ec70a591aff463b"
                           hex"f23d78200fb8cc14a4eba286afe8924120efad9e3d3f06f7452c725e53728b8f"
                           hex"86c9fb245fbaf7086ab0092e215213830d1091212efc1ec59ddc3a83707d4ab8";

        bytes memory S   = hex"5f49d8dc4519d9520d6542eca08cafb2d99cdb97c5a8685df2476b40505a2f9e"
                           hex"8d63d76516b83481e2d961a7e8dc5f9f46887e394776711b0f85e4303065c06d"
                           hex"362456bc219fc6eb343ede6733f779f75853533bc9ab876188da8ad98f9ea2f3"
                           hex"35d2ceec34ef9cb2782bb0f79cad309608ddc222e00ebcff9d14f6e6ed39638b";

        assertEq(RsaVerify.pkcs1Sha256Raw(Msg,S,e,n),true);
   }

    /*
    SHAAlg = SHA256
    e = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001
    d = 252c4956ac328ba04789bfdc5e90819981a100f3b540069ba8719b8b3ba27980cc7c96710a75ec0da83c1ddf353b45845f3db7224cdecbe5653cebb01fb66305d42e617e8a51514c6d2fb6b3cbe3ad9478ab7acb575f854ec9c9576a70c63934921c39662b32b8c93fb660f64f50e5481892a8ef4b92a64774995f2a0fbd64b9
    Msg = ff23e00f819bae424e41d6b762ea6b88801e651c831c964af31de0c1d6dda4a7c8587d804ed12f526819da06650e7412fb627555979ed442f2663341e5fe57527e0ddaf453a124451674976a6a6e0a31f56a79f5b73dfac39af4f3ba4a5e8bb846cb5e333812756482d975ab1910162f96bfd7c58a02f113125189f5ac05291f
    S = 8b5a3675f397841c53a9021dad71a1efab91451c71ad7060ce85d75b306d6403ba23d3370b0695be87485cf6680204c68424bc7e442ef90ac01c4df420ef574294823250a000d56a5d00947800dcb2f4947f5b4eb18fa1dbdc6ab16be4b7131102d4dff98ddeac38554473964d29cdc521ee690cde5a8cd16889aa090c32c53e
    SaltVal = 00
    Result = F (1 - Message changed)
    */

   function testFIPS_message_changed() public {

        bytes memory e   = hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000010001";

        bytes memory Msg = hex"ff23e00f819bae424e41d6b762ea6b88801e651c831c964af31de0c1d6dda4a7"
                           hex"c8587d804ed12f526819da06650e7412fb627555979ed442f2663341e5fe5752"
                           hex"7e0ddaf453a124451674976a6a6e0a31f56a79f5b73dfac39af4f3ba4a5e8bb8"
                           hex"46cb5e333812756482d975ab1910162f96bfd7c58a02f113125189f5ac05291f";

        bytes memory S =   hex"8b5a3675f397841c53a9021dad71a1efab91451c71ad7060ce85d75b306d6403"
                           hex"ba23d3370b0695be87485cf6680204c68424bc7e442ef90ac01c4df420ef5742"
                           hex"94823250a000d56a5d00947800dcb2f4947f5b4eb18fa1dbdc6ab16be4b71311"
                           hex"02d4dff98ddeac38554473964d29cdc521ee690cde5a8cd16889aa090c32c53e";

        assertEq(RsaVerify.pkcs1Sha256Raw(Msg,S,e,n),false);

    }

     /*
     SHAAlg = SHA256
     e = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001
     d = 252c4956ac328ba04789bfdc5e90819981a100f3b540069ba8719b8b3ba27980cc7c96710a75ec0da83c1ddf353b45845f3db7224cdecbe5653cebb01fb66305d42e617e8a51514c6d2fb6b3cbe3ad9478ab7acb575f854ec9c9576a70c63934921c39662b32b8c93fb660f64f50e5481892a8ef4b92a64774995f2a0fbd64b9
     Msg = a6ce108ff3100b953781496c3d081fe32b8cedaf6d14aab2ef2dc37d8f8d2613d2f599efd55c51498749c0961681ae4ea7e28bf14a8f044c2d4dd4f9102ddd25f86c7795289708eb4df2d526f91b176952eb52fd0c9de2989432d6e08e13022b82f95089d20a5704f0452f26cd1f83bc956ee7da99876c1f8da3723af388bead
     S = 750e59f29d2dfeedab2a3a09034904715957149126c63e6a2dc7a633a32c4c0561d54eeb1479cb65274bac37cac4751f4dffdfb7530171599b61d94862845f6cd12a5e0bd6adabc36f06d216a00b1942349710540555106aeb87f5cf3f78df918f36cf63291ef2a7064e31b84075d1c8b551225a25f59c721a3d77046078557f
     SaltVal = 00
     Result = F (3 - Signature changed )
     */

     function testFIPS_signature_changed() public {

        bytes memory e   = hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000010001";

        bytes memory Msg = hex"a6ce108ff3100b953781496c3d081fe32b8cedaf6d14aab2ef2dc37d8f8d2613"
                           hex"d2f599efd55c51498749c0961681ae4ea7e28bf14a8f044c2d4dd4f9102ddd25"
                           hex"f86c7795289708eb4df2d526f91b176952eb52fd0c9de2989432d6e08e13022b"
                           hex"82f95089d20a5704f0452f26cd1f83bc956ee7da99876c1f8da3723af388bead";

        bytes memory S =   hex"750e59f29d2dfeedab2a3a09034904715957149126c63e6a2dc7a633a32c4c05"
                           hex"61d54eeb1479cb65274bac37cac4751f4dffdfb7530171599b61d94862845f6c"
                           hex"d12a5e0bd6adabc36f06d216a00b1942349710540555106aeb87f5cf3f78df91"
                           hex"8f36cf63291ef2a7064e31b84075d1c8b551225a25f59c721a3d77046078557f";

        assertEq(RsaVerify.pkcs1Sha256Raw(Msg,S,e,n),false);

    }

    /*
    SHAAlg = SHA256
    e = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003
    Msg = 9be28a4763c6665880c1c2a8a74494622be46de3c20e5b118cf70fee51d33b6d0b473e84a4200382004526a33eea59e13b07070e580937207ec7b2cc5fb76856fe6210a771150fa0e5da9baee4a6209ed3d4e2b3bfd2e5f6591b0ace3e657ad07c1b47d8520d5159386767f11fdfaf41fa3348fb7dd32d3c25da5d1d78433985
    S = 0ac6e41252383ee5d07f4fb08a22204f56440a8f3c8568d6e6bae46cfc9d39b65b2eae827164d716e9e465301d08fca7356ef447e0699feabbfac16ed19dc9233b457fe64d6fab38aca4464e5cd3eae3f43bab17856cdcc942e2cc848b7bf390fc53b3ed2e6f63c5d961bc83475ac200708f6e1d5be30cbe24fe4d3dad754269
    SaltVal = 00
    Result = F (2 - Public Key e changed )
    */

    function testFIPS_public_key_e_changed() public {

        bytes memory e   = hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000003";

        bytes memory Msg = hex"a6ce108ff3100b953781496c3d081fe32b8cedaf6d14aab2ef2dc37d8f8d2613"
                           hex"d2f599efd55c51498749c0961681ae4ea7e28bf14a8f044c2d4dd4f9102ddd25"
                           hex"f86c7795289708eb4df2d526f91b176952eb52fd0c9de2989432d6e08e13022b"
                           hex"82f95089d20a5704f0452f26cd1f83bc956ee7da99876c1f8da3723af388bead";

        bytes memory S =   hex"750e59f29d2dfeedab2a3a09034904715957149126c63e6a2dc7a633a32c4c05"
                           hex"61d54eeb1479cb65274bac37cac4751f4dffdfb7530171599b61d94862845f6c"
                           hex"d12a5e0bd6adabc36f06d216a00b1942349710540555106aeb87f5cf3f78df91"
                           hex"8f36cf63291ef2a7064e31b84075d1c8b551225a25f59c721a3d77046078557f";

        assertEq(RsaVerify.pkcs1Sha256Raw(Msg,S,e,n),false);

    }

    /*
    SHAAlg = SHA256
    e = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001
    Msg = f56379c42e3ba856585ca28f7fb768f65d273a5fc546156142857b0afb7c72d2d97ecfceec71b4260bdc58c9bb42065f53af69805d9006233ec70a591aff463bf23d78200fb8cc14a4eba286afe8924120efad9e3d3f06f7452c725e53728b8f86c9fb245fbaf7086ab0092e215213830d1091212efc1ec59ddc3a83707d4ab8
    S = 5f49d8dc4519d9520d6542eca08cafb2d99cdb97c5a8685df2476b40505a2f9e8d63d76516b83481e2d961a7e8dc5f9f46887e394776711b0f85e4303065c06d362456bc219fc6eb343ede6733f779f75853533bc9ab876188da8ad98f9ea2f335d2ceec34ef9cb2782bb0f79cad309608ddc222e00ebcff9d14f6e6ed39638b
    SaltVal = 00
    Result = P
    */

    function testFIPS_passed_ok() public {

        bytes memory e   = hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000010001";

        bytes memory Msg = hex"f56379c42e3ba856585ca28f7fb768f65d273a5fc546156142857b0afb7c72d2"
                           hex"d97ecfceec71b4260bdc58c9bb42065f53af69805d9006233ec70a591aff463b"
                           hex"f23d78200fb8cc14a4eba286afe8924120efad9e3d3f06f7452c725e53728b8f"
                           hex"86c9fb245fbaf7086ab0092e215213830d1091212efc1ec59ddc3a83707d4ab8";

        bytes memory S   = hex"5f49d8dc4519d9520d6542eca08cafb2d99cdb97c5a8685df2476b40505a2f9e"
                           hex"8d63d76516b83481e2d961a7e8dc5f9f46887e394776711b0f85e4303065c06d"
                           hex"362456bc219fc6eb343ede6733f779f75853533bc9ab876188da8ad98f9ea2f3"
                           hex"35d2ceec34ef9cb2782bb0f79cad309608ddc222e00ebcff9d14f6e6ed39638b";

        assertEq(RsaVerify.pkcs1Sha256Raw(Msg,S,e,n),true);

    }

    /*
    SHAAlg = SHA256
    e = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001
    d = 252c4956ac328ba04789bfdc5e90819981a100f3b540069ba8719b8b3ba27980cc7c96710a75ec0da83c1ddf353b45845f3db7224cdecbe5653cebb01fb66305d42e617e8a51514c6d2fb6b3cbe3ad9478ab7acb575f854ec9c9576a70c63934921c39662b32b8c93fb660f64f50e5481892a8ef4b92a64774995f2a0fbd64b9
    Msg = 399b54f756514628f32ce8f1cf391d77047af55f3d43804923e5e09a188aa27f28604f2f3cfa3d7091f3ab5c69d40d650137a597c22d531dbbdeae074f6f534a2b297e087cd7d7125e6f8eac97f5a990859d9d3555301c5076b02f9c4d3f84d62b3d090c7cb1ba1841eab668c066990079f206c15d1383eb3ba58ae17bc2dc2c
    S = a62e4b688bb3c4c2e11a3a0b1ef81ff4bbaa110c9b830d02bda2d364dadb2345a8c5dca58c611515f0c09732ee6a6642d5c5c339460a9d15022f48c36e9bc2fb8b2b0ff99005273287b8c3bed87993baf52f0e9d079281bc25a8694ed9692446127c26c34f21e610a84f3617247ecfb3b5337fe59d1239dfb7fdac8694dbef0b
    SaltVal = 00
    EM with hash moved = 0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d060960864801650304020105000420be1f73a059cec568dcdfddf1daff4201e79273653f88ef8f16be7e9ee660335aefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefef
    Result = F (4 - Format of the EM is incorrect - hash moved to left )
    */

   function testFIPS_format_of_the_EM_is_incorrect_hash_moved_to_left() public {

        bytes memory e   = hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000010001";

        bytes memory Msg = hex"399b54f756514628f32ce8f1cf391d77047af55f3d43804923e5e09a188aa27f"
                           hex"28604f2f3cfa3d7091f3ab5c69d40d650137a597c22d531dbbdeae074f6f534a"
                           hex"2b297e087cd7d7125e6f8eac97f5a990859d9d3555301c5076b02f9c4d3f84d6"
                           hex"2b3d090c7cb1ba1841eab668c066990079f206c15d1383eb3ba58ae17bc2dc2c";

        bytes memory S   = hex"a62e4b688bb3c4c2e11a3a0b1ef81ff4bbaa110c9b830d02bda2d364dadb2345"
                           hex"a8c5dca58c611515f0c09732ee6a6642d5c5c339460a9d15022f48c36e9bc2fb"
                           hex"8b2b0ff99005273287b8c3bed87993baf52f0e9d079281bc25a8694ed9692446"
                           hex"127c26c34f21e610a84f3617247ecfb3b5337fe59d1239dfb7fdac8694dbef0b";

        assertEq(RsaVerify.pkcs1Sha256Raw(Msg,S,e,n),false);

    }

    /*
    SHAAlg = SHA256
    e = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001
    d = 252c4956ac328ba04789bfdc5e90819981a100f3b540069ba8719b8b3ba27980cc7c96710a75ec0da83c1ddf353b45845f3db7224cdecbe5653cebb01fb66305d42e617e8a51514c6d2fb6b3cbe3ad9478ab7acb575f854ec9c9576a70c63934921c39662b32b8c93fb660f64f50e5481892a8ef4b92a64774995f2a0fbd64b9
    Msg = b8518b80a55b365eb1850e18f88da2941c99543c2f865df3d37d114d9fc764ffc5e2ae94f2d4ab6276bfc6bda5b6976a7dcfaa56897982880410dd5542af3ad34c469990cbec828327764842ef488f767c6b0c8cd1e08caec63438f2665517d195a4d4daf64bc2a70bd11d119eec93a060960245d162844c5f11a98cd26003e1
    S = 06317d3df0fa7ae350729ae2096b050dcec8909d36681ccca09a7a527b90767f8c2318c49e09483b48df77ddb632d6ca721155165389f7795d3ede70465678649399242aed6d984ca74fc6c2eb4dd4bb2cd7bf2125ec853f2bf757d665b29487bc5b63df0d0b03b18608d3d9a7576ea0954aef3d3303f7d8fd7e7f9725c114e2
    SaltVal = 00
    EM with trailer wrong =0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff443031300d060960864801650304020105000420a51c139e5ff91509eb0bd542bebfb9a4baa9399a5535d9168942298ce69c4f5b
    Result = F (5 - Format of the EM is incorrect - 00 on end of pad removed )
    */

   function testFIPS_format_of_the_EM_is_incorrect_00_on_end_of_pad_removed() public {

        bytes memory e   = hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000010001";

        bytes memory Msg = hex"b8518b80a55b365eb1850e18f88da2941c99543c2f865df3d37d114d9fc764ff"
                           hex"c5e2ae94f2d4ab6276bfc6bda5b6976a7dcfaa56897982880410dd5542af3ad3"
                           hex"4c469990cbec828327764842ef488f767c6b0c8cd1e08caec63438f2665517d1"
                           hex"95a4d4daf64bc2a70bd11d119eec93a060960245d162844c5f11a98cd26003e1";

        bytes memory S   = hex"06317d3df0fa7ae350729ae2096b050dcec8909d36681ccca09a7a527b90767f"
                           hex"8c2318c49e09483b48df77ddb632d6ca721155165389f7795d3ede7046567864"
                           hex"9399242aed6d984ca74fc6c2eb4dd4bb2cd7bf2125ec853f2bf757d665b29487"
                           hex"bc5b63df0d0b03b18608d3d9a7576ea0954aef3d3303f7d8fd7e7f9725c114e2";

        assertEq(RsaVerify.pkcs1Sha256Raw(Msg,S,e,n),false);

    }

    /*
        > openssl genrsa -out private.pem 1024

        > cat private.pem
        -----BEGIN RSA PRIVATE KEY-----
        MIICXAIBAAKBgQDfPt3gCblrxbA7SL1z/nCjrSDq9iTQ3BuhIaRcxzmJN0G3z4Ks
        8ckVc+yCZlOJl8Zpl2AUjeV+VJgxkeygF29RjlR7hf4Lt9nhUN8Z7uc0z1M4IZx/
        j3sTs59ThBefYsE15UTLcL51BXUfNFaOBpgQla7sTzqIdjlxij4R1IwkDQIDAQAB
        AoGAQEoBaThDrnaSpq/u5w158Ji15xQVTBRm3IMsqw8wUYSZJ07Z6eYDK2tjy7We
        DvynRdcy8xhd44CHB5dnVj8JbiBX26i05fkOy3vtWtWWPQi+lIBLPOYiJA3Jeu01
        KrRUKpDjDx9jz5bV3RQNIKhy6oWAmzqZw84w2H5Yu1GeNl0CQQD2NzMllvxh1b03
        2CF0KNvEJo83VmpGoNNnljKaMwuDXeog+NGEkOL89iBZLmaErdaUIKXMi7rKBHTe
        zc4KoeMrAkEA6B388AOtofBiS0kLumLxW6S27cbjOiJ6kgi2QuoZeYjwP1Sd2vBJ
        d/0ooqwO2m2ZBMhHvfWJNsj97bX9d2VZpwJBAK9Ruv/HNUtM8QF0ys110pcnhc83
        n1FPb3lRQBMAye/uzapQwpAMwzSw5XPbUHClgCfV33l4/baf2cBU96QmhiUCQAqq
        9ikBwkUjCyFypftW+MjBdTbQYTkWxJNZmybQI4OWa5Q9i1O4n2fIVsnDJpubVeEG
        Y2Wzly7RZfo61v9ZxRkCQDwTiiLUD7w6IE9CHhz6j1yI6P1Nn+wuymu7YMXG0zjs
        H6knPQhmeq6EXguCWPVvCIGbHZn16g+s9jkUEq48V+Y=
        -----END RSA PRIVATE KEY-----

        > openssl rsa -in private.pem -outform der -pubout -out public.pem

        # addd -n to echo to remove final carriage return
        > echo -n "hello world" | openssl dgst -sha256 -sign private.pem | xxd -p | tr -d \\n

        079bed733b48d69bdb03076cb17d9809072a5a765460bc72072d687dba492afe951d75b814f561f253ee5cc0f3d703b6eab5b5df635b03a5437c0a5c179309812f5b5c97650361c645bc99f806054de21eb187bc0a704ed38d3d4c2871a117c19b6da7e9a3d808481c46b22652d15b899ad3792da5419e50ee38759560002388

        # extract the public n from the public key
        > openssl asn1parse -inform DER -i -in public.pem -strparse 18
            0:d=0  hl=3 l= 137 cons: SEQUENCE
            3:d=1  hl=3 l= 129 prim:  INTEGER           :DF3EDDE009B96BC5B03B48BD73FE70A3AD20EAF624D0DC1BA121A45CC739893741B7CF82ACF1C91573EC8266538997C6699760148DE57E54983191ECA0176F518E547B85FE0BB7D9E150DF19EEE734CF5338219C7F8F7B13B39F5384179F62C135E544CB70BE7505751F34568E06981095AEEC4F3A887639718A3E11D48C240D
          135:d=1  hl=2 l=   3 prim:  INTEGER           :010001

        # get the `e`=010001 and `n` DF..0D
    */

    function test_openssl() public {
        bytes memory e   = hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000000000"
                           hex"0000000000000000000000000000000000000000000000000000000000010001";

        bytes memory Msg = bytes("hello world");

        bytes memory S   = hex"079bed733b48d69bdb03076cb17d9809072a5a765460bc72072d687dba492afe"
                           hex"951d75b814f561f253ee5cc0f3d703b6eab5b5df635b03a5437c0a5c17930981"
                           hex"2f5b5c97650361c645bc99f806054de21eb187bc0a704ed38d3d4c2871a117c1"
                           hex"9b6da7e9a3d808481c46b22652d15b899ad3792da5419e50ee38759560002388";

        bytes memory nn   = hex"DF3EDDE009B96BC5B03B48BD73FE70A3AD20EAF624D0DC1BA121A45CC7398937"
                           hex"41B7CF82ACF1C91573EC8266538997C6699760148DE57E54983191ECA0176F51"
                           hex"8E547B85FE0BB7D9E150DF19EEE734CF5338219C7F8F7B13B39F5384179F62C1"
                           hex"35E544CB70BE7505751F34568E06981095AEEC4F3A887639718A3E11D48C240D";

        assertEq(RsaVerify.pkcs1Sha256Raw(Msg,S,e,nn),true);
    }

    /*
        According to RFC4055, pg.5 and RFC8017, pg. 64, for SHA-1, and the SHA-2 family,
        the algorithm parameter has to be NULL and both explicit NULL parameter and implicit
        NULL parameter (ie, absent NULL parameter) are considered to be legal and equivalent.

        Reported by @yahyazadeh Daniel Yahyazadeh
    */

    function test_rfc8017_implicit_null_parameter() public {

        bytes memory N = hex"E932AC92252F585B3A80A4DD76A897C8B7652952FE788F6EC8DD640587A1EE56"
                         hex"47670A8AD4C2BE0F9FA6E49C605ADF77B5174230AF7BD50E5D6D6D6D28CCF0A8"
                         hex"86A514CC72E51D209CC772A52EF419F6A953F3135929588EBE9B351FCA61CED7"
                         hex"8F346FE00DBB6306E5C2A4C6DFC3779AF85AB417371CF34D8387B9B30AE46D7A"
                         hex"5FF5A655B8D8455F1B94AE736989D60A6F2FD5CADBFFBD504C5A756A2E6BB5CE"
                         hex"CC13BCA7503F6DF8B52ACE5C410997E98809DB4DC30D943DE4E812A47553DCE5"
                         hex"4844A78E36401D13F77DC650619FED88D8B3926E3D8E319C80C744779AC5D6AB"
                         hex"E252896950917476ECE5E8FC27D5F053D6018D91B502C4787558A002B9283DA7";

        bytes memory e = hex"03";

        bytes memory m = "hello world!";

        bytes memory S = hex"a0073057133ff3758e7e111b4d7441f1d8cbe4b2dd5ee4316a14264290dee5ed"
                         hex"7f175716639bd9bb43a14e4f9fcb9e84dedd35e2205caac04828b2c053f68176"
                         hex"d971ea88534dd2eeec903043c3469fc69c206b2a8694fd262488441ed8852280"
                         hex"c3d4994e9d42bd1d575c7024095f1a20665925c2175e089c0d731471f6cc1454"
                         hex"04edf5559fd2276e45e448086f71c78d0cc6628fad394a34e51e8c10bc39bfe0"
                         hex"9ed2f5f742cc68bee899d0a41e4c75b7b80afd1c321d89ccd9fe8197c44624d9"
                         hex"1cc935dfa48de3c201099b5b417be748aef29248527e8bbb173cab76b48478d4"
                         hex"177b338fe1f1244e64d7d23f07add560d5ad50b68d6649a49d7bc3db686daaa7";

        assertEq(RsaVerify.pkcs1Sha256Raw(m,S,e,N),true);

     }

}
